{"version":3,"sources":["components/Formulario.js","components/Cita.js","App.js","serviceWorker.js","index.js"],"names":["Formulario","crearCita","useState","mascota","propietario","fecha","hora","sintomas","cita","actualizarCita","error","actualizarError","actualizarState","e","target","name","value","className","onSubmit","preventDefault","trim","id","uuid","type","placeholder","onChange","Cita","eliminarCita","onClick","App","citasIniciales","JSON","parse","localStorage","getItem","citas","guardarCitas","useEffect","setItem","stringify","nuevasCitas","filter","titulo","length","map","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.356ca11f.chunk.js","sourcesContent":["import React , { Fragment, useState } from 'react';\r\nimport { v4 as uuid } from 'uuid'; // es una librería para asignar id, la instalamos a través de la terminal de VS con el comando npm i uuid\r\nimport PropTypes from 'prop-types'; // Los props types nos van a indicar que tal dato es un array, un objeto,etc\r\n\r\nconst Formulario = ({crearCita}) => {\r\n    \r\n    //Iniciamos el state Crear state de citas, en este caso tenemos un state en un componente y no en la app ppal como en basicos\r\n    const [cita, actualizarCita] = useState ({  // iniciamos el state como un objeto en este caso, por eso las llaves y no los corchetes\r\n    //ponemos los name de los  inputs. Inicia vacío porque el cliente debe llenar los datos. \r\n    mascota: '',\r\n    propietario: '',\r\n    fecha: '',\r\n    hora: '',\r\n    sintomas: ''\r\n    });\r\n\r\n    const [ error, actualizarError ] = useState(false)\r\n\r\n  //Función que se ejecuta cuando el usuario escribe en el input\r\n    const actualizarState = e => {\r\n        actualizarCita({\r\n            ...cita,\r\n            [e.target.name]: e.target.value  //este trozo de código nos permite copiar el state y añadirle datos sin que se borren los demás.\r\n        })\r\n    }\r\n\r\n    //Extraer los valores\r\n    const { mascota, propietario, fecha, hora, sintomas } = cita; //para no tener que repetir cita.mascota, cita.propietario,etc. \r\n    // Cuando el usuario presiona agregar cita\r\n    const submitCita = e => {\r\n        e.preventDefault(); //Al igual que js previene la acción por default. demuestra cómo puede evitarse que un texto invalido entre en un campo de formulario mediante preventDefault().\r\n    \r\n    //Validar\r\n\r\n    if (mascota.trim() === '' || propietario.trim() === '' || fecha.trim() === '' || hora.trim() === '' || sintomas.trim() === ''){\r\n        actualizarError(true); //el .trim lo que hace es eliminar los espacios vacíos\r\n        return;\r\n    }\r\n    //Eliminar el mensaje previo\r\n    actualizarError(false);\r\n\r\n    //Asignarr un ID\r\n    cita.id = uuid();\r\n    \r\n    // Crear la cita \r\n\r\n    crearCita(cita);\r\n\r\n    // Reiniciar el form - copiamos los values, para que react recargue este componente sin valores. Debemos aplicar la funcion actualizarCita para no modificar directamente el state\r\n    actualizarCita({\r\n        mascota: '',\r\n        propietario: '',\r\n        fecha: '',\r\n        hora: '',\r\n        sintomas: ''\r\n    })\r\n\r\n    }\r\n    return ( \r\n\r\n        //aquí no podemos poner if como condicion debemos poner un ternario\r\n        <Fragment>\r\n        <h2>Crear cita</h2> \r\n        {error ? <p className=\"alerta-error\">Todos los campos son obligatorios</p> : null } \r\n        \r\n        <form onSubmit={submitCita}>\r\n            <label>Nombre de la mascota</label>\r\n            <input \r\n                type=\"text\"\r\n                name=\"mascota\"\r\n                className=\"u-full-width\"\r\n                placeholder=\"Nombre Mascota\"\r\n                onChange = {actualizarState} //es un evento al que le asignamos una function. Los eventos en react se llaman igual que en js solo que adelante llevan on y el evento en mayúscula onChange\r\n                value= {mascota} // va entre llaves porque es código js    \r\n            />\r\n\r\n            <label>Nombre dueño</label>\r\n            <input \r\n                type=\"text\"\r\n                name=\"propietario\"\r\n                className=\"u-full-width\"\r\n                placeholder=\"Nombre del dueño\"\r\n                onChange = {actualizarState}\r\n                value = {propietario} \r\n            />\r\n            <label>Fecha</label>\r\n            <input \r\n                type=\"date\"\r\n                name=\"fecha\"\r\n                className=\"u-full-width\"\r\n                onChange = {actualizarState}  \r\n                value ={fecha} \r\n            />\r\n            <label>Hora</label>\r\n            <input \r\n                type=\"time\"\r\n                name=\"hora\"\r\n                className=\"u-full-width\"\r\n                onChange = {actualizarState} \r\n                value = {hora}  \r\n            />\r\n            <label>Síntomas</label>\r\n            <textarea\r\n                className=\"u-full-width\"\r\n                name=\"sintomas\"\r\n                onChange = {actualizarState}\r\n                value ={sintomas}\r\n            ></textarea>\r\n            <button \r\n                type=\"submit\"\r\n                className=\"u-full-width button-primary\" \r\n            >Agregar cita</button>\r\n\r\n        </form>\r\n        </Fragment>\r\n     );\r\n}\r\n Formulario.propTypes = {\r\n     crearCita: PropTypes.func.isRequired\r\n }\r\nexport default Formulario;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n//componente funcional sfc\r\n\r\nconst Cita = ({cita, eliminarCita}) => ( \r\n\r\n    <div className=\"cita\">\r\n        <p>Mascota: <span>{cita.mascota}</span></p>\r\n        <p>Propietario: <span>{cita.propietario}</span></p>\r\n        <p>Fecha: <span>{cita.fecha}</span></p>\r\n        <p>Hora: <span>{cita.hora}</span></p>\r\n        <p>Sintomas: <span>{cita.sintomas}</span></p>\r\n\r\n        <button\r\n            className=\"button eliminar u-full-width\"\r\n            onClick={ () => eliminarCita(cita.id)} //tenemos que hacer una arrow function porque si mandamos a llamar directamente a la función, la va a ejecutar, con la arrow function espera al evento clck\r\n\r\n            >Eliminar &times;</button>\r\n    </div>\r\n\r\n    );\r\nCita.propTypes = {\r\n    cita: PropTypes.array.isRequired,\r\n    eliminarCita: PropTypes.func.isRequired\r\n}\r\n \r\nexport default Cita;\r\n","import React , { Fragment, useState, useEffect } from 'react';\nimport Formulario from './components/Formulario';\nimport Cita from './components/Cita';\n\nfunction App() {\n  //Citas en LocalStorage\n  let citasIniciales = JSON.parse(localStorage.getItem('citas')); //el parse int convierte el json en un dato manipulable para js\n  if (!citasIniciales){\n    citasIniciales = [];\n  }\n    //Arreglo de citas \n    const [citas, guardarCitas ] = useState(citasIniciales);\n\n  //USE EFFECT - para realizar ciertas operaciones cuando el state cambia. La cita se va a guardar en el localstorage al refrescar la página o ante los cambis. En jquery document ready. siempre la sintaxis es con una funcion de flecha. Lo agregamos al import.\n\n  useEffect(() => {\n    let citasIniciales = JSON.parse(localStorage.getItem('citas'));\n\n    if(citasIniciales){\n      localStorage.setItem('citas', JSON.stringify(citas))\n    } else {\n      localStorage.setItem('citas', JSON.stringify([]));\n    }\n  }, [citas] ); //para decirle a useeffect que se ejecute una vez debemos pasarle un array vacío. A esto se conoce como dependencias.\n\n  //Leer la nueva cita más las citas que ya tenemos - Función que tome las citas actuales y agregue la nueva\n\n  const crearCita = cita => {\n    guardarCitas([ ...citas, cita ]); // necesitamos copiar el código porque de esta manera no borra lo anterior sino que lo agregar\n      //citas.push se puede usar, pero no es buena práctica\n  }\n\n  //Función que eliminan una cita por su id\n  const eliminarCita = id => {\n    const nuevasCitas = citas.filter(cita => cita.id !== id );\n    guardarCitas(nuevasCitas); // lo que le decimos a filter es que nos filter el que es diferente al id y borre el id.\n  }\n\n  //Mensaje condicional (si no hay citas, nos va a decir que no hay citas, lo mismo si las eliminamos. Pero si hay citas nos va a decir administra tus citas)\n\n  const titulo = citas.length === 0 ? 'No hay citas' : 'Administra tus citas';\n\n  return (\n    <Fragment>\n    <h1>Administrador de pacientes</h1>\n    <div className=\"container\">\n      <div className=\"row\">\n        <div className=\"one-half column\">\n           <Formulario\n              crearCita={crearCita}\n           />\n        </div>\n        <div className=\"one-half column\">\n           <h2>{titulo}</h2>\n           {citas.map(cita => (  //Usamos siempre el map y no el forEach. El paréntesis da implícito el return. \n             <Cita\n              key={cita.id}\n              cita={cita}\n              eliminarCita={eliminarCita} //le pasamos la función\n             />\n           ))}\n        </div>\n      </div>\n    </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}